#!/bin/bash

# ARM Tool Beaglebone Black.
read -p "Project Name: " ID

# backup project into home folder.
backup_project(){
  tar -cf $ID-$(date +%d-%m)-bkp.tar.gz .build_$ID
  mv *-bkp.tar.gz $HOME
}

# check project name.
if [ -d .*_${ID} ]; then
  cd .*_${ID}
else
  mkdir -p .build_$ID && cd .*_${ID}
fi

# Project source.
DIR_BUILD=.build_${ID}

# Fullscreen support execute: xwininfo -stats -root.
WIDTH="1920"; HEIGHT="1080";

# Linaro Toolchain GCC (gnueabihf).
MIRROR_LINARO="https://releases.linaro.org/components/toolchain/binaries/"
HARD_FLOAT="/arm-linux-gnueabihf/"
HARD_FLOAT_ARCH='*x86.*_arm-linux-gnueabihf.tar.xz"'

# Bootloader U-Boot.
MIRROR_UBOOT="https://gitlab.denx.de/u-boot/u-boot"

# Root File System Debian.
MIRROR_DEB_FS="https://rcn-ee.com/rootfs/eewiki/minfs/"

# Beaglebone Kernel.
MIRROR_KERNEL="https://github.com/RobertCNelson/bb-kernel"

# compilador.
compilador(){
  pkglist=""
  versions=$(curl -s "$MIRROR_LINARO" | grep binaries | sed -e "s/<a href=\"\/components\/toolchain\/binaries\///g" | sed 's/\/"//g' | sort)

  for pkg in $versions;
    do pkglist="$pkglist FALSE $pkg";
  done

  compiladores=`zenity --title="GCC Compiler Version"\
		       --width=$WIDTH\
                       --height=$HEIGHT\
                       --text="Choose item:"\
                       --list\
                       --column="Selected"\
		       --column="Linaro Toolchain Package"\
                       --radiolist $pkglist\
                       --ok-label="Build Source"\
                       --cancel-label="Back"`

  # check bash special variable!
  if [ $? -eq 0 ]; then
    for VERSION in $compiladores; do
        GCC=$(curl -s "$MIRROR_LINARO$VERSION$HARD_FLOAT" | grep -E "$HARD_FLOAT_ARCH")
	GCC=$(echo $GCC | sed -e "s/<a href=\"\/components\/toolchain\/binaries\/"$VERSION"\/arm-linux-gnueabihf//g")
	GCC=${GCC:1:-1};

	# download/extract compiler.
        curl $MIRROR_LINARO$VERSION$HARD_FLOAT$GCC -L -O
	tar -xvf $GCC && BINARY=$(ls -d gcc*arm-linux-gnueabihf)

        # update bash profile(GCC) & test ${CC}gcc --version
        echo "CC=$PWD/$BINARY/bin/arm-linux-gnueabihf-" >> ~/.bash_profile
        . $HOME/.bash_profile && ${CC}gcc --version
    done
    else
      echo "Invalid Version!"
  fi
}

# Universal Bootloader (U-Boot)
bootloader(){
  git clone --progress --verbose $MIRROR_UBOOT
  cd u-boot/ && tag_list=$(git tag | grep v2)

  choices=`zenity --title="Graphical Tool for CROSS Compile"\
                  --width=$WIDTH\
		  --height=$HEIGHT\
                  --text="Choose item:"\
                  --list\
                  --column="Selected"\
                  --column="U-Boot Tag Version"\
                  --radiolist $tag_list`

  git checkout $choices -b tmp
  tag=$(git branch -v)
}

#
# Linux Kernel.
# Versions: Texas Instruments & LK Basic Support Modify.
#
kernel(){
  # robert-nelson
  # git clone https://github.com/sodmlx/linux-kernel
  # git checkout origin/am33x-v4.15 -b tmp
  # ./build_kernel.sh

  # download linux kernel.
  curl -O https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.13.10.tar.xz

  git clone --depth 1 https://github.com/sodmlx/linux
  git fetch --tags
}

#
# Root File System.
#
file_system(){

  DEB_FS_VERSIONS=$(curl -s $MIRROR_DEB_FS | sed -nr 's/(.*)href="?([^ ">]*).*/\2\n\1/; T; P; D;')

  choices=`zenity --title="Graphical Tool for CROSS Compile"\
                  --width=$WIDTH\
                  --height=$HEIGHT\
                  --text="Choose item:"\
                  --list --column="Selected"\
                  --column="Root File System"\
                  --radiolist $DEB_FS_VERSIONS`
  # wget https://rcn-ee.com/rootfs/eewiki/minfs/debian-9.3-minimal-armhf-2017-12-09.tar.xz -q --show-progress
  # tar xf debian-9.3-minimal-armhf-2017-12-09.tar.xz -C .
}

# Beaglebone Black xbuild.
while true;
do
  main=`zenity --title="Build ARM Image for Beaglebone Black."\
               --width=$WIDTH\
	       --height=$HEIGHT\
               --list\
	       --column="Configure Packages:"\
                               "ARM Cross Compiler: GCC"\
                               "Bootloader: U-Boot"\
                               "Linux Kernel"\
                               "Root File System"\
  			       "Setup microSD card"\
                               "Install Kernel and Root File System"`

  case "${main}" in
  "ARM Cross Compiler: GCC") compilador;;
  "Bootloader: U-Boot") bootloader;;
  "Linux Kernel") kernel;;
  "Root File System") file_system;;
  "Setup microSD card") sdcard_build;;
  "Install Kernel and Root File System") build;;
  *)
  exit 1
 esac
done
